#!/bin/node

const config = require('./config.json')

const fs = require('fs')
const request = require('request')
const openwhisk = require('openwhisk')

function createBuckets(cloud) {
    cloud.buckets.forEach(function(bucket) {
	request({
	    uri: bucket,
	    method: "PUT",
	    headers: {
		// XXX: why is X-Auth needed?
		"X-Auth": "BOGUS",
		"X-Webhook": cloud.triggerUri,
		"X-Webhook-Auth": process.env.__OW_API_KEY
	    }
	}, (error, response, body) => {
	    if (response.statusCode >= 200 &&
		response.statusCode < 300) {
		console.log(cloud.name, "created bucket", bucket)
	    } else {
		console.log(cloud.name, "bucket creation failed", body)
	    }
	})
    })
}


if (!process.env.__OW_API_KEY) {
    console.log("please run...")
    console.log("export __OW_API_KEY=$(wsk property get --auth | head -n1 | awk '{print $3}')")
    process.exit(1)
}

console.log(config)

const actionJar = fs.readFileSync(config.actionJar)
config.clouds.forEach(function(cloud) {
    // make sure __OW_API_KEY is set in environment, e.g. export __OW_API_KEY=$(wsk property get --auth | head -n1 | awk '{print $3}')
    var ow = openwhisk({apihost: cloud.openwhiskApihost})
    console.log(cloud.name, "creating action", config.action)
    ow.actions.update({
	name: config.action,
	action: {
	    exec: {
		kind: 'java',
		main: config.actionJarMain,
		code: fs.readFileSync(config.actionJar).toString('base64')
	    },
	    parameters: [
		{
		    key: 'modelEndpoint',
		    value: cloud.modelUri
		}
	    ],
	    limits: {
		memory: 512
	    }
	}
    }).then(result => {
	console.log(cloud.name, "created action", config.action)
	ow.triggers.delete({name: config.trigger}).catch(err => {
	    // XXX: trigger update does not create a trigger, it is inconsistent w/ action update and rule update
	}).then(result => {
	    ow.triggers.create({name: config.trigger}).then(result => {
		console.log(cloud.name, "created trigger", config.trigger)
		ow.rules.update({name: config.rule,
				 trigger: config.trigger,
				 action: config.action}).then(result => {
			console.log(cloud.name, "created rule", config.rule)
		    }).catch(err => {
			console.error(cloud.name, "rule creation failed", err)
		    }).then(result => {
			ow.rules.enable({name: config.rule}).catch(err => {
			    console.error(cloud.name, "rule enabling failed", err)
			}).then(result => {
			    // XXX: existing rules on disabled on UPDATE, must re-enable - https://github.com/apache/incubator-openwhisk/pull/3254
			})
		    })
	    }).catch(err => {
		console.error(cloud.name, "trigger creation failed", err)
	    })
	})
    }).catch(err => {
	console.error(cloud.name, "action creation failed", err)
    })
    createBuckets(cloud)
})
